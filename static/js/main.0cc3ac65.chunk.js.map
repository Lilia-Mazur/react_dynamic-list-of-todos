{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","selectedUserId","setSelectedUserId","useState","todos","setTodos","query","setQuery","selectedQuery","setSelectedQuery","filterTodos","filter","todo","title","includes","completed","useEffect","fetch","then","response","ok","json","Promise","reject","todosFromServer","className","type","value","onChange","event","target","placeholder","map","checked","readOnly","userId","onClick","id","CurrentUser","setUserId","selectedUser","setSelectedUser","requestUsers","userFromServer","name","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cc3ac65.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TodoList.scss';\nimport { requestTodos } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number,\n  setSelectedUserId: (userId: number) => void,\n};\n\n// eslint-disable-next-line max-len\nexport const TodoList: React.FC<Props> = ({ selectedUserId, setSelectedUserId }) => {\n  const [todos, setTodos] = useState<Todo[] | []>([]);\n  const [query, setQuery] = useState('');\n  const [selectedQuery, setSelectedQuery] = useState('');\n\n  const filterTodos = todos\n    .filter(todo => todo.title.includes(query))\n    .filter(todo => {\n      switch (selectedQuery) {\n        case 'active':\n          return todo.completed === false;\n\n        case 'completed':\n          return todo.completed === true;\n\n        default:\n          return todo;\n      }\n    });\n\n  useEffect(() => {\n    requestTodos()\n      .then(todosFromServer => setTodos(todosFromServer));\n  }, []);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        data-cy=\"filterByTitle\"\n        type=\"text\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n        placeholder=\"Search by title\"\n      />\n\n      <select\n        value={selectedQuery}\n        onChange={(event) => setSelectedQuery(event.target.value)}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul data-cy=\"listOfTodos\" className=\"TodoList__list\">\n          {filterTodos.map((todo: Todo) => (\n            <li\n              key={todo.id}\n              className={\n                todo.completed\n                  ? 'TodoList__item TodoList__item--checked'\n                  : 'TodoList__item TodoList__item--unchecked'\n              }\n            >\n              <label>\n                <input\n                  checked={todo.completed}\n                  type=\"checkbox\"\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={\n                  selectedUserId === todo.userId\n                  // eslint-disable-next-line max-len\n                    ? 'TodoList__user-button TodoList__user-button--selected button'\n                    : 'TodoList__user-button button'\n                }\n                type=\"button\"\n                onClick={() => {\n                  if (todo.userId !== selectedUserId) {\n                    setSelectedUserId(todo.userId);\n                  }\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const TODOS_URL = 'https://mate.academy/students-api/todos';\nconst USERS_URL = 'https://mate.academy/students-api/users';\n\nexport const requestTodos = () => {\n  return fetch(TODOS_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n\nexport const requestUsers = (userId: number): Promise<User> => {\n  return fetch(`${USERS_URL}/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { requestUsers } from '../../api/api';\n\ntype Props = {\n  userId: number,\n  setUserId: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, setUserId }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    requestUsers(userId)\n      .then(userFromServer => setSelectedUser(userFromServer));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${selectedUser?.id}`}</span>\n      </h2>\n\n      <h3\n        className=\"CurrentUser__name\"\n        data-cy=\"userName\"\n      >\n        {selectedUser?.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n      <button\n        type=\"button\"\n        className=\" button\"\n        onClick={() => setUserId(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const setUserId = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectedUserId={selectedUserId}\n          setSelectedUserId={setUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              setUserId={setUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}